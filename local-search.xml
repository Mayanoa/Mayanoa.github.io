<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网页开发基础</title>
    <link href="/2024/04/22/%E7%AC%94%E8%AE%B0/%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/04/22/%E7%AC%94%E8%AE%B0/%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p align="justify">内容包括：<p>网页开发基础</blockquote><span id="more"></span> <h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="Lesson1：进入Web世界"><a href="#Lesson1：进入Web世界" class="headerlink" title="Lesson1：进入Web世界"></a>Lesson1：进入Web世界</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>HTML</strong><br>HTML 组成了网页的骨架，是一种用来描述网页内容的语言。<br>HTML 的全称是超文本标记语言（Hyper Text Markup Language），并非编程语言。<br><strong>超文本</strong><br>即不仅仅是纯文本。<br>在HTML文档中，除文字内容以外，还可以记录图片、超链接、表格、按钮、输入框等非文本内容。<br><strong>标记语言</strong><br>HTML提供了一些标签，用来标记网页中不同的内容。<br>这些标签由一些英文单词组成，且均被放在一对尖括号中。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>CSS</strong><br>CSS 决定网页的外观，是一种用来描述网页样式的语言。<br>CSS 全称是层叠样式表，是一种用来为网页添加样式的计算机语言。<br>CSS 为网页提供了丰富的样式规则，它可以随意设置网页的风格、布局、修改内容的大小、形状和位置。<br>到目前为止，CSS 提供了500多条样式规则，它们均由一个或多个单词组成。<br>比如，color 表示设置颜色；background-color 表示背景颜色；display 表示显示方式；<br>为网页设置 CSS 规则的过程称为样式声明，存储这些申明的文件就是样式表。<br>CSS 不能单独使用。使用时需要将样式表引入 HTML 文档中，与 HTML 配合使用。<br>CSS 的出现使得网页显示与网页内容可以完全分开。<br>HTML 负责确定网页中有哪些内容。<br>CSS 负责确定以哪种外观展现这些元素。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>JavaScript</strong><br>若要生成一个动态、可交互的网页，需要JavaScript的支持。<br>与HTML、CSS 不同，JavaScript 是一门真正意义上的编程语言。<br>它决定了网页的功能。<br>JavaScript（后面简称JS）是一门能在浏览器中运行的编程语言。<br>JS 与我们学过的Python类似，它拥有条件、循环、函数等多种规则。<br>JS 常用来为网页添加一些动态效果与交互功能。<br>它提供了多种控制HTML 与CSS 的方法，来帮助我们动态的生成网页内容。<br>HTML 为网页提供骨架；<br>CSS 为网页提供样式；<br>JavaScript 为网页提供功能。<br>它们相互配合，共同工作，组成了我们现在看到的网页。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/%E8%BF%9B%E5%85%A5web%E4%B8%96%E7%95%8C.png"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记1（基础入门）</title>
    <link href="/2024/03/18/%E7%AC%94%E8%AE%B0/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/18/%E7%AC%94%E8%AE%B0/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p align="justify">内容包括：编程基础&数据结构与判断&循环&函数和类&编程实践<p></blockquote><span id="more"></span> <h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="Lesson1：编程中的文本"><a href="#Lesson1：编程中的文本" class="headerlink" title="Lesson1：编程中的文本"></a>Lesson1：编程中的文本</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>代码（Code）</strong><br>程序员用某种编程语言写出来的文本，可以被计算机一行行地执行。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>Print()</strong><br>在电脑屏幕上输出内容。<br>括号内为具体需要输出的内容。<br>输出的内容为字符串时，需要将字符串用双引号括起来。<br>在 Python 中，使用单引号或是双引号都可以创建字符串。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>字符串（String）</strong><br>作用：编程中表示文本的数据类型。所有用引号括起来的数据，都是字符串。<br>在引号的内部，数据可以是英文、中文、数字等等，只要是被双引号括起来的数据，都是字符串。</p>          </div><div class="note note-warning">            <p><strong>Python的代码规范</strong><br>空行：代码之间用空行分隔，表示一段新的代码的开始。在编写时不插入空行，Python运行也不会出错。<br>顶格：同一级别的代码需要顶格开始写，不能有空格，不然程序会报错。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>输入（Input）</strong><br>输入是指外界传递给程序的数据。<br><strong>输出（Output）</strong><br>输出是指程序传递给外界的数据。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>注释（Annotation）</strong><br>注释的作用是对代码进行批注说明。<br>注释以#开头，用于告诉电脑，这行代码是注释，不需要被电脑执行。<br>在 # 后空一格，与文本分开，这样内容不会堆积，看起来整洁和美观。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/L1%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><h3 id="Lesson2：变量与赋值"><a href="#Lesson2：变量与赋值" class="headerlink" title="Lesson2：变量与赋值"></a>Lesson2：变量与赋值</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>变量（Variables）</strong><br>变量是编程语言中能存储数据的抽象概念，它可以存储各种数据。<br>变量名只能由字母、数字、下划线、中文组成。<br>需要注意的是：<br>变量不能以数字开头；<br>变量不能包含空格；<br>变量对大小写敏感，变量A和变量a是不同的。<br><strong>常量（Constant）</strong><br>常量是指在程序运行时不能被修改的数据。<br>比如整数 175，小数 52.5，字符串 “Tony” 都是常量，它们是不能被修改的。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>赋值（Assignment）</strong><br>赋值需要用到等号“&#x3D;”，所以等号“&#x3D;”又叫做“赋值运算符”。<br>例如：name &#x3D; “Tony”就是一次赋值，将常量”Tony”赋值给变量name。<br>变量作为一个存储数据的“地方”，其中的东西是可以改变的。<br>给一个变量进行两次赋值后，仅保留最后一次赋值的数据。<br>可以将变量A赋值给变量B。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>格式化输出（Formatted Output）</strong><br>格式化输出让我们可以对字符串里的内容进行灵活替换。<br>name &#x3D; “Tony”<br>print(f”My name is {name}”)<br>上述代码表示将变量name的值（此处为Tony）在print代码中输出。<br>字符串之前的小写字母 f 表示这个字符串需要进行格式化输出。<br>注意是小写字符f而不是大写字母F。<br>需要用变量替换的部分用大括号{}进行标记。</p>          </div><div class="note note-info">            <p><strong>转义字符</strong><br>转义字符是一种特殊的字符，它们以反斜线 \ 开头，例如换行符 \n 。<br>当字母 n 与反斜线 \ 结合后，它们的含义和功能相比之前发生了转变，因此这样的字符被称为转义字符。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/L2%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><h3 id="Lesson3：编程中的数字"><a href="#Lesson3：编程中的数字" class="headerlink" title="Lesson3：编程中的数字"></a>Lesson3：编程中的数字</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>整型（Integer）</strong><br>整型是Python中用来表示整数的数据类型。<br>整型直接通过数字来表示，且无需添加引号。<br>如果用来表示负数，可以在数字前添加一个负号(-)。<br>跟字符串类似，我们也可以使用print()功能输出一个整型。<br><strong>浮点型（float）</strong><br>浮点型是用来表示浮点数的数据类型，是编程语言里用来呈现和存储小数的一种方式。<br>它通过数字和小数点来表示，无需添加引号。<br>如果表示负数，可以在数字前添加一个负号（-）。<br>同样的，使用print()功能也可以输出一个浮点型数据。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>四则运算</strong><br>a &#x3D; 1<br>b &#x3D; 2<br>print(a+b)<br>print(a-b)<br>print(a*b)<br>print(a&#x2F;b)<br>整型之间加、减、乘法的计算结果是整型。<br>整型之间除法的计算结果，都是浮点型。就算刚好整除，也会得到一个浮点型数据。<br>浮点型的计算结果是浮点型，只要参与运算的双方有一个是浮点型，那么结果也是浮点型。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>取整和取模（Round And Modulo）</strong><br>当两个数无法整除的时候，我们会得到一个余数。<br>例如：7÷3&#x3D;2……1，2被称作商，1被称作余数。<br>取整运算用于求取两个数相除之后的商。取整运算的符号是&#x2F;&#x2F;。<br>取模运算用于求取两个数相除之后的余数。取模运算的符号是百分号 %。<br>四则运算，遵循“先乘除，后加减”的运算顺序。<br>倘若运算中，包含了取整取模，就要遵循“先乘除取整取模，后加减”的运算顺序。</p>          </div><div class="note note-warning">            <p><strong>字符串的运算</strong><br>一般情况，字符串是不可以和整型以及浮点数数据进行运算的。<br>若进行运算，计算机会报错“TypeError”。<br>仅有两种情况下，字符串可以进行运算：<br>①整型和字符串相乘：整型*字符串，输出的结果，是将字符串重复几次拼接在一起。<br>②字符串和字符串相加：字符串+字符串，输出的结果，是这几个字符串的拼接。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/L3%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><h3 id="Lesson4：编程中的真与假"><a href="#Lesson4：编程中的真与假" class="headerlink" title="Lesson4：编程中的真与假"></a>Lesson4：编程中的真与假</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>布尔数（Boolean）</strong><br>布尔数是一种数据类型，它只有“真”（True）和“假”（False）两种值。<br>True 和 False 不加引号。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>比较运算（Comparison Operation）</strong><br>a &#x3D; 3<br>b &#x3D; 1<br>print(a &gt; b)<br>上述代码输出结果为true（a确实大于b）。<br>类似”&gt;”，”&lt;”这样，对二者进行比较的，我们称为比较运算符。<br>除了”&gt;”，”&lt;”这两个比较运算符以外，还有：<br>&#x3D;&#x3D; 等于符号，注意是两个等号，要和&#x3D;赋值区分开 ；<br>&gt;&#x3D; 大于等于符号；<br>&lt;&#x3D; 小于等于符号；<br>!&#x3D; 不等于符号。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>逻辑运算（Logic Operation）</strong><br>逻辑运算，是针对多个“真”、“假”命题进行判断的运算。<br>“并且（and）”、“或者（or）”和“非（not）”是常见的三种逻辑运算。<br>and运算符表示“并且”：<br>仅当and左右两边的布尔数均为True时，运算结果才为True。<br>其它情况下，运算结果都为False。<br>or运算符表示“或者”：<br>只要当or左右两边的布尔数有一个为True时，运算结果就为True。<br>也就是说，只有当or左右两边的布尔数均为False时，运算结果才为False。<br>not运算符表示“非”：<br>与and和or不同，not运算符只会运算一个布尔数，表示对这个布尔数进行取反。<br>也就是说，not True 运行结果是False，not False运行结果是True。<br>注意True和False都要首字母大写。<br>当涉及多个条件时，在Python中常会将比较运算和逻辑运算混合使用。<br>在此时，Python会优先执行比较运算，再按优先级顺序执行多种逻辑运算。<br>逻辑运算间的优先级为not &gt; and &gt; or。<br>如果想控制代码执行的顺序，可以对希望优先执行的运算使用括号。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>布尔表达式（Boolean Expression）</strong><br>无论是进行简单的比较运算，还是进行了逻辑运算，或者是混合使用。<br>在Python中，只要运算结果是True或False。这样的运算式，都被统一称为布尔表达式。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/L4%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><h3 id="Lesson5：单向选择的判断"><a href="#Lesson5：单向选择的判断" class="headerlink" title="Lesson5：单向选择的判断"></a>Lesson5：单向选择的判断</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>判断语句（Judgment Statement）</strong><br>判断语句是程序的三大语句结构之一。<br>它的作用是根据判断的条件是否成立（真或假），来决定后续代码执行顺序。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>if判断（If Statement）</strong><br>yourAge &#x3D;  20<br>myAge &#x3D; 18<br>if yourAge &gt; myAge:<br>　　print(“你的年龄比我大”)<br>上述代码判断yourAge是否比myAge大，如果结果为True，则输出相应语句。<br>程序运行到 if 判断时，如果条件为真，则进入执行部分；完成后，程序接着运行 if 判断下面的代码。<br>程序运行到 if 判断时，如果条件为假，程序就直接跳开 if 判断的执行部分，运行后面的代码。<br>注意if判断的执行部分需要前置四个空格。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>关键字（Keyword）</strong><br>关键字是程序语言中有特殊意义的单词，它们都不能被当作变量名使用。<br>在我们已经学过的知识里，and，or，not，True，False都是关键字。<br>此外，由于变量名区分大小写，所以 if 不能作为变量名，但 IF 、If、iF可以。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>缩进（Indentation）</strong><br>Python 中不同层级的代码之间强制要求缩进，并且相同层级的代码要求缩进的空格数量一致。<br>在Python中，缩进的数量不做强制的要求，可以 1 个空格，可以 2 个空格。<br>建议每个缩进用 4 个空格，这是一种比较美观易读的代码风格。<br><strong>代码块（Code Block）</strong><br>同一层级的代码集合叫做代码块，代码块中的代码会按由上至下的顺序执行。<br>在 Python 中，通过缩进来划分代码块。<br>if 判断后面跟随条件，如果条件成立，程序执行归属于 if 判断的一个代码块。<br>这时候就需要使用缩进组织代码块，区分代码的层级。<br>在连续的多个 if 判断中，每一个 if 判断内都有一个代码块。<br>只有当 if 条件成立时，程序才会执行这个 if 判断里面的代码块。<br>如果条件不成立，程序就会跳开这个 if 判断，继续运行接下来的代码。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/L5%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><h3 id="Lesson6：双向选择的判断"><a href="#Lesson6：双向选择的判断" class="headerlink" title="Lesson6：双向选择的判断"></a>Lesson6：双向选择的判断</h3><div class="note note-success">            <p><strong>代码</strong><br><strong>if-else判断</strong><br>yourScore &#x3D; 80<br>myScore &#x3D; 90<br>if yourScore &gt; myScore:<br>　　print(“你的得分比我高”)<br>else:<br>　　print(“你的得分不比我高”)<br>关键字 else，如果之前的 if 判断条件不成立，就执行 else 的代码块。<br>在 else 之后使用冒号，表示后续缩进的代码块在判断条件不成立的时候会被执行。<br>程序运行到 if 判断时，如果条件为真，执行 if 的代码块。<br>程序运行到 if 判断时，如果条件为假，程序就直接跳开 if 判断的执行部分，运行 else 的代码块。<br>if-else 语句有两个特性：<br>①else 需与 if 搭配使用，它无法独立出现。必须先有 if，然后才能使用 else，否则程序就会报错。<br>②if 与 else 成互斥关系。程序不会既执行 if 内的代码块，又执行 else 内的代码块。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>空值（null）</strong><br>空值，又叫 NULL 值，在 Python 中写作 None。None 是关键字。<br>它代表这个数值不是整型，不是字符串，不是浮点型，表示没有值。<br>注意，它和 0 不一样，因为 0 的值是 0，而空值的值是None。<br><strong>非空（Non-null）</strong><br>当一个变量里有值，并且这个值不是空值（None），我们就说这个变量“非空”。<br>同时我们也把所有不是空值的值称为“非空值”。<br>布尔表达式和非零非空数据，都可以作为判断语句的条件。<br>在判断语句中，对非零值判断为真；对数字0的判断为假；对 None 的判断为假。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/L6%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><h2 id="数据结构与判断"><a href="#数据结构与判断" class="headerlink" title="数据结构与判断"></a>数据结构与判断</h2><h3 id="Lesson1：复杂的多向选择"><a href="#Lesson1：复杂的多向选择" class="headerlink" title="Lesson1：复杂的多向选择"></a>Lesson1：复杂的多向选择</h3><div class="note note-success">            <p><strong>代码</strong><br><strong>elif判断</strong><br>day &#x3D; 3<br>if day &#x3D;&#x3D; 1:<br>　　print(“元气满满地工作”)<br>elif (day &gt;&#x3D; 2) and (day &lt;&#x3D; 5):<br>　　print(“继续搬砖吧”)<br>else:<br>　　print(“世界这么大，出去走走吧”)<br>使用elif进行多向选择的判断。<br>if-elif-else 语句有3个特性：<br>①若不满足 if 条件，判断是否满足 elif 的条件，满足就执行 elif 内的代码块，不满足就执行 else 内的代码块。<br>②elif 需与 if 搭配使用，它无法独立出现。必须先有 if ，然后才能使用 elif ，否则程序就会报错。<br>③if 、elif 与 else 成互斥关系。程序不会同时执行 if 内、 elif 内和 else 内的代码块，只会执行其中一个。<br>判断的条件超过3个时，中间的多个条件都能使用 elif ，无论中间有多少个 elif ，它和 if 、elif 都是互斥关系。</p>          </div><div class="note note-info">            <p><strong>概念</strong><br><strong>嵌套（Nested Structure）</strong><br>嵌套语句是指将一个语句装在另一个语句里。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>if嵌套</strong><br>time &#x3D; 13<br>num &#x3D; 2<br>if (time &gt;&#x3D; 9) and (time &lt;&#x3D; 23):<br>　　print(“在打折时间内”)<br>　　if num &gt;&#x3D; 2:<br>　　　　print(“全场八折”)<br>上述代码在第一个if内的代码块中嵌套了另一个if语句。<br>嵌套的原则是先确定外层条件再确定内层条件，只有当外层条件成立时，才进入到内层条件当中继续执行。<br>在相互嵌套时，一定要严格遵守不同级别代码块的缩进规范。<br>每嵌套一层都需要在原有缩进的基础上，再增加相应的缩进。<br>不仅是 if 嵌套 ，在Python中，if 、if-else 和 if -elif-else 之间也可以相互嵌套。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/%E5%A4%8D%E6%9D%82%E7%9A%84%E5%A4%9A%E5%90%91%E9%80%89%E6%8B%A9.png"></p><h3 id="Lesson2：数据和判断小结"><a href="#Lesson2：数据和判断小结" class="headerlink" title="Lesson2：数据和判断小结"></a>Lesson2：数据和判断小结</h3><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%92%8C%E5%88%A4%E6%96%AD%E5%B0%8F%E7%BB%93.png"></p><h3 id="Lesson3：储存多个数据的元组"><a href="#Lesson3：储存多个数据的元组" class="headerlink" title="Lesson3：储存多个数据的元组"></a>Lesson3：储存多个数据的元组</h3><div class="note note-info">            <p><strong>概念</strong><br><strong>数据结构（Data Structure）</strong><br>数据结构是计算机存储和组织数据的方式。<br>数据结构有很多种，其中使用最多的，是元组(tuple)、列表(list)、字典(dict)这三种。<br>元组，是一种由多个数据组成的有序数据集合。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>元组（Tuple）</strong><br>元组，是一种由多个数据组成的有序数据集合。<br>它就像一排抽屉，我们可以在抽屉里面放不同的东西。<br>calendar &#x3D; (“1月1日”, “1月2日”, “1月3日”, “1月4日”)<br>print(calendar)<br>一个括号，是定义元组的固定格式。<br>三个逗号，逗号是用来分隔元组里面各个元素的固定符号。<br>元组里可以存储各种各样的数据类型，一个元组可以完全由整型、浮点型、字符串、布尔数构成。<br>也可以由这几种数据类型的常量混合组成。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>索引（Index）</strong><br>元组中的数据是有顺序的。<br>例如calendar这个元组里面，排在第一位的是”1月1日”，第四位的是”1月4日”。<br>当我们输出calendar[0]的时候，就得到了这个元组的第一个数据。<br>像这样访问它内部数据的机制，叫做“索引”。<br>索引是在数据结构中用来定位和寻找数据的检索方式。<br>可以通俗理解为索引是数据的位置。<br>索引都是从0开始的。因此，第一个数据的索引为0，第二个数据的索引为1，以此类推。<br>可以通过中括号[]和索引的方式，直接访问到某一个位置的元素。</p>          </div><div class="note note-success">            <p><strong>代码</strong><br><strong>IN运算</strong><br>倘若一个元组的元素非常多，我们想要寻找某一个数据，是不是在元组中，用肉眼看的方式非常麻烦。<br>元组这样的数据结构，有一种运算方式，叫in运算符，可以进行快速判断。<br>numbers &#x3D; (0,1,2,3,5,8,13,21,34,55,89,144,233,377)<br>result &#x3D; 5 in numbers<br>print(result)<br>上述代码的输出结果为true。</p>          </div><p><img src="/Imgpost/%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E5%85%83%E7%BB%84.png"></p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lesson1：编程中的文本-1"><a href="#Lesson1：编程中的文本-1" class="headerlink" title="Lesson1：编程中的文本"></a>Lesson1：编程中的文本</h3><div class="note note-primary">            <p><strong>注释练习</strong><br>编写注释，并使用print()分行打印给定内容。</p>          </div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 使用print()输出Hello World</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-comment"># 使用print()输出Hello World</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I like coding&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Lesson2：变量与赋值-1"><a href="#Lesson2：变量与赋值-1" class="headerlink" title="Lesson2：变量与赋值"></a>Lesson2：变量与赋值</h3><div class="note note-primary">            <p><strong>格式化输出</strong><br>将字符串”变量”赋值给 word，再使用 word 格式化输出以下句子：<br>今天我们学习了变量。变量能够存储不同的数据。</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">word = <span class="hljs-string">&quot;变量&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;今天我们学习了<span class="hljs-subst">&#123;word&#125;</span>。<span class="hljs-subst">&#123;word&#125;</span>能够存储不同的数据。&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Lesson3：编程中的数字-1"><a href="#Lesson3：编程中的数字-1" class="headerlink" title="Lesson3：编程中的数字"></a>Lesson3：编程中的数字</h3><div class="note note-primary">            <p><strong>情暖中秋</strong><br>公司采购了100个月饼，以及一批包装盒，每个包装盒里需放3个月饼。<br>①计算出这些月饼一共可以装满多少个包装盒，将结果赋值给变量boxNum并使用print()格式化输出：<br>月饼可以装满{boxNum}个包装盒<br>②计算装满所有的包装盒后，还剩下多少个月饼没有包装，将结果赋值给变量left并使用print()格式化输出：<br>还剩下{left}个月饼没有包装</p>          </div><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">boxNum = <span class="hljs-number">100</span> <span class="hljs-comment">// 3</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(f<span class="hljs-string">&quot;月饼可以装满&#123;boxNum&#125;个包装盒&quot;</span>)</span></span><br><span class="hljs-attribute">left</span> = <span class="hljs-number">100</span> % <span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(f<span class="hljs-string">&quot;还剩下&#123;left&#125;个月饼没有包装&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h3 id="Lesson4：编程中的真与假-1"><a href="#Lesson4：编程中的真与假-1" class="headerlink" title="Lesson4：编程中的真与假"></a>Lesson4：编程中的真与假</h3><div class="note note-primary">            <p><strong>目标体重</strong><br>最近正在健身的小夜目标体重为 60.2。今天称重发现自己的体重达到了 60.2。<br>输出小夜今天的体重，再与目标体重对比，如果相同则输出”True”。</p>          </div><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">weight_ye <span class="hljs-operator">=</span> <span class="hljs-number">60.2</span><br>weight_goal <span class="hljs-operator">=</span> <span class="hljs-number">60.2</span><br><span class="hljs-attribute">result</span> <span class="hljs-operator">=</span> (weight_ye <span class="hljs-operator">=</span><span class="hljs-operator">=</span> weight_goal)<br>print(weight_ye)<br>print(result)<br></code></pre></td></tr></table></figure><h3 id="Lesson5：单向选择的判断-1"><a href="#Lesson5：单向选择的判断-1" class="headerlink" title="Lesson5：单向选择的判断"></a>Lesson5：单向选择的判断</h3><div class="note note-primary">            <p><strong>选择一款手机</strong><br>大学开学前，Jack想换一个白色的手机。<br>但Jack预算只有6000元，那么在最新一代手机里，他能换哪款手机呢？<br>已知：<br>iphone12 &#x3D; 7299 颜色为红色<br>xiaomi10 &#x3D; 3699 颜色为白色<br>请编写程序判断手机的价格和颜色，输出 Jack 可以购买的手机型号。<br>输出示例(手机型号全小写，按顺序输出)：<br>可以购买xiaomi10</p>          </div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 定义手机变量并赋值</span><br><span class="hljs-attribute">iphone12</span> = <span class="hljs-number">7299</span><br><span class="hljs-attribute">iphone12Color</span> = <span class="hljs-string">&quot;红色&quot;</span><br><span class="hljs-attribute">xiaomi10</span> = <span class="hljs-number">3699</span><br><span class="hljs-attribute">xiaomi10Color</span> = <span class="hljs-string">&quot;白色&quot;</span><br><span class="hljs-comment"># 利用if函数比较手机价格与6000的关系并输出结果</span><br><span class="hljs-attribute">if</span> iphone12 &lt; <span class="hljs-number">6000</span> and iphone12Color == <span class="hljs-string">&quot;白色&quot;</span>:<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;可以购买iphonw12&quot;</span>)<br><span class="hljs-attribute">if</span> xiaomi10 &lt; <span class="hljs-number">6000</span> and xiaomi10Color == <span class="hljs-string">&quot;白色&quot;</span>:<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;可以购买xiaomi10&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Lesson6：双向选择的判断-1"><a href="#Lesson6：双向选择的判断-1" class="headerlink" title="Lesson6：双向选择的判断"></a>Lesson6：双向选择的判断</h3><div class="note note-primary">            <p><strong>报考飞行员</strong><br>小夜的男同学今年20岁，身高175，他想要报考飞行员。<br>飞行员的要求是年龄在17到27岁之间，身高在169到185之间，小夜的同学满足报考条件么？<br>请编写代码，让程序判断是否满足报考条件：<br>①20赋值给变量age，175赋值给变量height；<br>②使用 if-else 判断，如果age在17到27之间（包括17和27）。<br>并且height在169到185之间（包括169和185），输出“符合报考条件”；否者，输出“不符合报考条件”。</p>          </div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">age</span> = <span class="hljs-number">20</span><br><span class="hljs-attribute">height</span> = <span class="hljs-number">175</span><br><span class="hljs-attribute">if</span> (age &gt;= <span class="hljs-number">17</span> and age &lt;= <span class="hljs-number">27</span>) and (height &gt;= <span class="hljs-number">169</span> and height &lt;= <span class="hljs-number">185</span>):<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;符合报考条件&quot;</span>)<br><span class="hljs-attribute">else</span>:<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;不符合报考条件&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Lesson1：复杂的多向选择-1"><a href="#Lesson1：复杂的多向选择-1" class="headerlink" title="Lesson1：复杂的多向选择"></a>Lesson1：复杂的多向选择</h3><div class="note note-primary">            <p><strong>奇数还是偶数</strong><br>①给一个变量 num 赋值23。<br>②第一层判断，如果 num 大于0，就输出”num大于0”，再进一步判断:<br>—–如果 num 是偶数（除以2的余数为0），就输出”num是正偶数”，<br>——否则，输出”num是正奇数”。<br>③否则，直接输出”num小于等于0”。</p>          </div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">num = 23<br><span class="hljs-keyword">if</span> num &gt;0:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num大于0&quot;</span>)<br>    <span class="hljs-keyword">if</span> num % 2 == 0:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num是正偶数&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num是正奇数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num小于等于0&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Lesson3：储存多个数据的元组-1"><a href="#Lesson3：储存多个数据的元组-1" class="headerlink" title="Lesson3：储存多个数据的元组"></a>Lesson3：储存多个数据的元组</h3><div class="note note-primary">            <p><strong>身份证编码</strong><br>小华的身份证编码如下：<br>id &#x3D; (‘5’, ‘4’, ‘0’, ‘1’, ‘0’, ‘1’, ‘1’, ‘9’, ‘9’, ‘9’, ‘0’, ‘1’, ‘0’, ‘9’, ‘*‘, ‘*‘, ‘*‘, ‘*‘)<br>我国18位身份证号码的7-14位表示出生年、月、日。请据此输出小华的生日。<br>1.通过索引的方式提取身份证号码的7-14位拼接，并分别赋值给year,month,day；<br>2.格式化输出{year}-{month}-{day}。<br>输出示例：1999-01-09</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">id</span> = (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>year = <span class="hljs-built_in">id</span>[<span class="hljs-number">6</span>] + <span class="hljs-built_in">id</span>[<span class="hljs-number">7</span>] + <span class="hljs-built_in">id</span>[<span class="hljs-number">8</span>] + <span class="hljs-built_in">id</span>[<span class="hljs-number">9</span>]<br>month = <span class="hljs-built_in">id</span>[<span class="hljs-number">10</span>] + <span class="hljs-built_in">id</span>[<span class="hljs-number">11</span>]<br>day = <span class="hljs-built_in">id</span>[<span class="hljs-number">12</span>] + <span class="hljs-built_in">id</span>[<span class="hljs-number">13</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;year&#125;</span>-<span class="hljs-subst">&#123;month&#125;</span>-<span class="hljs-subst">&#123;day&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
