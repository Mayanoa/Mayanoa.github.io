<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习笔记1（基础入门）</title>
    <link href="/2024/03/18/%E7%AC%94%E8%AE%B0/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/18/%E7%AC%94%E8%AE%B0/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p align="justify">内容包括：编程基础&数据结构与判断&循环&函数和类&编程实践<p></blockquote><span id="more"></span> <h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="Lesson1：编程中的文本"><a href="#Lesson1：编程中的文本" class="headerlink" title="Lesson1：编程中的文本"></a>Lesson1：编程中的文本</h3><div class="note note-danger">            <p><strong>说明</strong><br>难题，想要查询01成绩比02成绩高，比较便利的方法是构造一个三列分别为学生ID，01成绩和02成绩的新表。<br>因此首先分别查询SC表格中，对应课程ID为01和02的学生ID及相应的成绩（分别用AS命名为A和B）。<br>分别查询后，通过相同的学生ID，使用INNER JOIN 联结两次查询的结果（A和B），即可构造出想要的新表格。<br>之后再使用WHERE语句即可轻松地得到01成绩大于02的学生名单（需默认学生两门课都有成绩）。<br>在这之后，再将上述查询语句与Student表格联结，即可查询全部的学生信息。<br>由于01课程和02课程都使用命名为Score的字段，因此代码中用AS重命名为S1和S2方便辨认。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> Student.*, S1 , S2 <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>(<span class="hljs-keyword">SELECT</span> SId, CId, score <span class="hljs-keyword">AS</span> S1 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;01&#x27;</span>) <span class="hljs-keyword">AS</span> A<br><span class="hljs-keyword">ON</span> Student.SId = A.SId<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> SId, CId, score <span class="hljs-keyword">AS</span> S2 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;02&#x27;</span>) <span class="hljs-keyword">AS</span> B<br><span class="hljs-keyword">ON</span> A.SId =B.SId <br><span class="hljs-keyword">WHERE</span> S1 &gt; S2;<br></code></pre></td></tr></table></figure><h3 id="1-1-查询同时存在“01”课程和“02”课程的情况"><a href="#1-1-查询同时存在“01”课程和“02”课程的情况" class="headerlink" title="1-1 查询同时存在“01”课程和“02”课程的情况"></a>1-1 查询同时存在“01”课程和“02”课程的情况</h3><div class="note note-info">            <p><strong>说明</strong><br>因为题目没有明确说明具体要什么信息，所以不再联结Student表，也不用WHERE做筛选。<br>其余部分和1-0没有区别。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> SId, CId, score <span class="hljs-keyword">AS</span> S1 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;01&#x27;</span>) <span class="hljs-keyword">AS</span> A<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> SId, CId, score <span class="hljs-keyword">AS</span> S2 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;02&#x27;</span>) <span class="hljs-keyword">AS</span> B<br><span class="hljs-keyword">ON</span> A.SId = B.SId<br></code></pre></td></tr></table></figure><h3 id="1-2-查询存在“01”课程但可能不存在“02”课程的情况（不存在时显示为-Null"><a href="#1-2-查询存在“01”课程但可能不存在“02”课程的情况（不存在时显示为-Null" class="headerlink" title="1-2 查询存在“01”课程但可能不存在“02”课程的情况（不存在时显示为 Null )"></a>1-2 查询存在“01”课程但可能不存在“02”课程的情况（不存在时显示为 Null )</h3><div class="note note-info">            <p><strong>说明</strong><br>和1-1区别仅在于需要增加不选择02课程（显示为NULL）的情况。<br>将INNER JIOIN 替换为LEFT OUTER JOIN即可，仅会过滤掉没有选择01课程的情况。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> SId, CId, score <span class="hljs-keyword">AS</span> S1 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;01&#x27;</span>) <span class="hljs-keyword">AS</span> A<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> SId, CId, score <span class="hljs-keyword">AS</span> S2 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;02&#x27;</span>) <span class="hljs-keyword">AS</span> B<br><span class="hljs-keyword">ON</span> A.SId = B.SId<br></code></pre></td></tr></table></figure><h3 id="1-3-查询不存在“01”课程但存在“02”课程的情况"><a href="#1-3-查询不存在“01”课程但存在“02”课程的情况" class="headerlink" title="1-3 查询不存在“01”课程但存在“02”课程的情况"></a>1-3 查询不存在“01”课程但存在“02”课程的情况</h3><div class="note note-info">            <p><strong>说明</strong><br>这次要求查选了02课程但没选01课程的情况，所以在1-2基础上改成RIGHT OUTER JOIN。<br>然后再加WHERE IS NULL的子句筛出没有选01课程的学生ID。<br>另一种方法是使用子查询：<br>首先查询出选了01课程的学生ID并用NOT IN否定，得到没有选择的01课程的学生ID。<br>然后再用AND添加WHERE子句，得到选择了02课程的学生ID，即满足题干的过滤要求。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> SId, CId, Score <span class="hljs-keyword">AS</span> S1 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;01&#x27;</span>) <span class="hljs-keyword">AS</span> A<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> SId, CId, Score <span class="hljs-keyword">AS</span> S2 <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;02&#x27;</span>) <span class="hljs-keyword">AS</span> B<br><span class="hljs-keyword">ON</span> A.SId = B.SId<br><span class="hljs-keyword">WHERE</span> S1 <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> SId <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> SId <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId = <span class="hljs-string">&#x27;01&#x27;</span> )<br><span class="hljs-keyword">AND</span> CId = <span class="hljs-string">&#x27;02&#x27;</span> ;<br></code></pre></td></tr></table></figure><h3 id="2-查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩"><a href="#2-查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩" class="headerlink" title="2 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩"></a>2 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</h3><div class="note note-info">            <p><strong>说明</strong><br>因为是需要按照学生的ID进行统计，因此需要使用GROUP BY分组。<br>在分组后，需要使用HAVING子句结合聚集函数过滤数据。<br>注意此处因为有分组所以不能使用WHERE子句，WHERE子句也不和聚集函数一起使用。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> Student.SID, Student.Sname, <span class="hljs-built_in">AVG</span>(SC.score) <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> SC <span class="hljs-keyword">ON</span><br>Student.SId = SC.SId<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SC.SId<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(SC.score) &gt;= <span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><h3 id="3-查询在SC表存在成绩的学生信息"><a href="#3-查询在SC表存在成绩的学生信息" class="headerlink" title="3 查询在SC表存在成绩的学生信息"></a>3 查询在SC表存在成绩的学生信息</h3><div class="note note-info">            <p><strong>说明</strong><br>方法1：使用子查询先查询有分数的学生ID，再用IN操作符嵌套进Student表的查询。<br>方法2：使用联结组合两张表，由于SC表每个学生不止1个成绩，因此需要使用DISTINCT去重避免输出重复数据。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.SId <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> SC.SId <span class="hljs-keyword">FROM</span> SC);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Student.* <span class="hljs-keyword">From</span> Student<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> SC <span class="hljs-keyword">ON</span><br>Student.SId = SC.SID;<br></code></pre></td></tr></table></figure><h3 id="4-0-查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩（没成绩的显示为Null）"><a href="#4-0-查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩（没成绩的显示为Null）" class="headerlink" title="4-0 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩（没成绩的显示为Null）"></a>4-0 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩（没成绩的显示为Null）</h3><div class="note note-info">            <p><strong>说明</strong><br>使用LETF JOIN以Student表为基底汇总SC表中成绩相关的信息。<br>聚集函数忽略NULL值，求和后依然会显示NULL值满足题干要求。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> Student.Sid, Sname, <span class="hljs-built_in">Count</span>(CID), <span class="hljs-built_in">SUM</span>(score) <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> SC <span class="hljs-keyword">ON</span> Student.SId = SC.SId<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Student.SId;<br></code></pre></td></tr></table></figure><h3 id="4-1-查有成绩的学生信息"><a href="#4-1-查有成绩的学生信息" class="headerlink" title="4-1 查有成绩的学生信息"></a>4-1 查有成绩的学生信息</h3><div class="note note-info">            <p><strong>说明</strong><br>这一题看起来和第3题完全一致，实际上是玩了个文字游戏。<br>有成绩和在SC表里存在成绩可以看作两个意思。<br>前者理解为成绩至少是个具体的分数，后者理解为SC表里某学生有对应的score字段。<br>考虑到SC表中不排除会有某学生的成绩为空的情况（尽管事实上没有）：<br>如果还像第3题用INNER JOIN，那么就会输出成绩为NULL的学生信息，不满足有成绩的要求。<br>因此这里需要使用LEFT OUTER JOIN联结两张表，通过WHERE选出score不是NULL值的数据。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Student.* <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> SC <span class="hljs-keyword">ON</span> Student.SId = SC.SId<br><span class="hljs-keyword">WHERE</span> score <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="5-查询「李」姓老师的数量"><a href="#5-查询「李」姓老师的数量" class="headerlink" title="5 查询「李」姓老师的数量"></a>5 查询「李」姓老师的数量</h3><div class="note note-info">            <p><strong>说明</strong><br>使用COUNT(*)函数统计满足过滤条件的行数。<br>注意运用通配符通配搜索时，需要用LIKE操作符匹配，而不是用相等匹配。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(*) <span class="hljs-keyword">FROM</span> Teacher<br><span class="hljs-keyword">WHERE</span> Tname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;李%&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="6-查询学过「张三」老师授课的同学的信息"><a href="#6-查询学过「张三」老师授课的同学的信息" class="headerlink" title="6 查询学过「张三」老师授课的同学的信息"></a>6 查询学过「张三」老师授课的同学的信息</h3><div class="note note-info">            <p><strong>说明</strong><br>方法1：使用传统的INNER JOIN内联结来汇总四张表格。<br>方法2：使用等值联结来汇总四张表格。<br>另：由于查询Student表格中的所有列，因此可以简写为Student.*。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> Student.SId, Sname, Sage, Ssex <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> SC <span class="hljs-keyword">ON</span><br>Student.SId = SC.SId<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Course <span class="hljs-keyword">ON</span><br>Course.CId = SC.CId<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Teacher <span class="hljs-keyword">ON</span> <br>Teacher.TId = Course.TId<br><span class="hljs-keyword">WHERE</span> Teacher.Tname = <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">SELECT Student.* FROM Student, <span class="hljs-keyword">SC, </span>Course, Teacher<br>WHERE Student.SId = <span class="hljs-keyword">SC.SId</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">AND </span>Course.CId = <span class="hljs-keyword">SC.CId</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">AND </span>Teacher.TId = Course.TId<br><span class="hljs-keyword">AND </span>Teacher.Tname = <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="7-查询没有学全所有课程的同学的信息"><a href="#7-查询没有学全所有课程的同学的信息" class="headerlink" title="7 查询没有学全所有课程的同学的信息"></a>7 查询没有学全所有课程的同学的信息</h3><div class="note note-info">            <p><strong>说明</strong><br>此处使用了嵌套的3个SELECT语句：<br>最内层：查询Course表格中的课程总数（COUNT函数求总数）。<br>中间层：查询SC表格中满足学习课程数等级课程总数的学生ID（GROUP BY+HAVING+COUNT过滤学生ID）。<br>最外层：查询Student表格中，与上述学生ID不符的学生的全部信息（NOT IN取不满足条件的所有学生ID）。<br>特别注意这里不能将Student和SC表格简单联结试图简化语句，联结后会刨去在SC表格中不存在的学生ID。<br>导致输出的结果会少掉学生ID为9-13的五名学生的数据。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.SId <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<br><span class="hljs-keyword">SELECT</span> SC.SId <span class="hljs-keyword">from</span> SC <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SC.SId<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(SC.CId) = (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(Course.CId) <span class="hljs-keyword">FROM</span> Course)<br>);<br></code></pre></td></tr></table></figure><h3 id="8-查询至少有一门课与学号为“01”的同学所学相同的同学的信息"><a href="#8-查询至少有一门课与学号为“01”的同学所学相同的同学的信息" class="headerlink" title="8 查询至少有一门课与学号为“01”的同学所学相同的同学的信息"></a>8 查询至少有一门课与学号为“01”的同学所学相同的同学的信息</h3><div class="note note-info">            <p><strong>说明</strong><br>首次查询学号为01的同学所学的课程，之后用IN条件结合子查询查询学习了同样课程的学生ID。<br>因为要查询所有学生的信息，所以使用等值联结SC和Student两张表，再用DISTINCT去重学生ID。<br>需要注意题干潜在含义是查询结果不应再包含学号为01的学生，所以用AND额外添加NOT过滤条件刨去01学生。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Student.* <span class="hljs-keyword">FROM</span> SC, Student<br><span class="hljs-keyword">WHERE</span> SC.SId = Student.SId<br><span class="hljs-keyword">AND</span> CId <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> CId <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SC.SId = <span class="hljs-string">&#x27;01&#x27;</span>)<br><span class="hljs-keyword">AND</span> <span class="hljs-keyword">NOT</span> Student.SId = <span class="hljs-string">&#x27;01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="9-查询和“01”号的同学学习的课程完全相同的其他同学的信息"><a href="#9-查询和“01”号的同学学习的课程完全相同的其他同学的信息" class="headerlink" title="9 查询和“01”号的同学学习的课程完全相同的其他同学的信息"></a>9 查询和“01”号的同学学习的课程完全相同的其他同学的信息</h3><div class="note note-danger">            <p><strong>说明</strong><br>难题，与01学生学习课程完全相同，需要满足两个条件：<br>条件1.所学习的课程中，任意一项课程都包含在01学生所学课程的范围内。<br>条件2.学习的课程总数与01学生的课程总数相同。<br>对于条件1，查询时不能粗暴使用IN，因为IN代表只要学生所学课程中有一项在01学生学习课程区间内即可。<br>因此需要换个思路，改为首先用NOT IN查询所学课程中存在与01学生所学课程不符的学生。<br>之后再用一次NOT IN，将这些课程与01学生不符的学生刨去，剩下学生学习的课程都在01学生的区间内。<br>对于条件2，使用GROUP BY+HAVING COUNT的组合过滤出课程总数与01学生相等的学生。<br>用AND连接上述两个条件，过滤出的学生即同时满足条件1和条件2，再刨去学生01本人，即达成目的。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> SId <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> SId <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> CId <br><span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> CId <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SId = <span class="hljs-string">&#x27;01&#x27;</span>)<br>)<br><span class="hljs-keyword">AND</span> SId <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> SId <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SId<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(CId) = (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(CId) <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SId = <span class="hljs-string">&#x27;01&#x27;</span>)<br>)<br><span class="hljs-keyword">AND</span> <span class="hljs-keyword">NOT</span> SId = <span class="hljs-string">&#x27;01&#x27;</span> ;<br></code></pre></td></tr></table></figure><h3 id="10-查询没学过「张三」老师讲授的任一门课程的学生姓名"><a href="#10-查询没学过「张三」老师讲授的任一门课程的学生姓名" class="headerlink" title="10 查询没学过「张三」老师讲授的任一门课程的学生姓名"></a>10 查询没学过「张三」老师讲授的任一门课程的学生姓名</h3><div class="note note-info">            <p><strong>说明</strong><br>方法1：用子查询嵌套，由内到外先查询老师叫张三的老师ID，再通过老师ID查询课程ID。<br>然后再通过课程ID查询学了该课程的学生ID，最后用NOT IN查询没学过课程的学生姓名。<br>方法2：使用联结将SC、Course和Teacher四张表联结，查询学习了张三老师课程的学生ID。<br>再嵌套一个子查询用NOT IN刨去这些学生。</p>          </div><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> Sname <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">WHERE</span><br>Student.SId <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> SC.Sid <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> SC.CID <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> Course.CID <span class="hljs-keyword">FROM</span> Course <br><span class="hljs-keyword">WHERE</span> COURSE.TId <span class="hljs-keyword">IN</span> <br>(<span class="hljs-keyword">SELECT</span> Teacher.TId <span class="hljs-keyword">FROM</span> Teacher <span class="hljs-keyword">WHERE</span> Tname = <span class="hljs-string">&#x27;张三&#x27;</span>)<br>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> Student.Sname <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Student.Sid <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> SC.SId <span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Course <span class="hljs-keyword">ON</span> SC.CId =Course.CId<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Teacher <span class="hljs-keyword">ON</span> Course.TId =Teacher.TId<br><span class="hljs-keyword">WHERE</span> Tname = <span class="hljs-string">&#x27;张三&#x27;</span> );<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
